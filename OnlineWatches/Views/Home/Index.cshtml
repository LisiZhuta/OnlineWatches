@model IEnumerable<OnlineWatches.Models.Watch>

@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" type="text/css" href="/Inex.css" />

<div class="container">
    <div class="text-center mt-5">
        <h1 class="display-4">Our Featured Collection</h1>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="slider-container">
        <div class="card-slider">
            @foreach (var watch in Model)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                            <a href="@Url.Action("Details", "Watch", new { id = watch.Id })">
                                <img src="@Url.Content(watch.ImgPath)" class="card-img-top" alt="Watch Image">
                            </a>
                        <div class="card-body">
                            <h5 class="card-title">@watch.Name</h5>
                            <p class="card-text">Price: $@watch.Price</p>
                            <p class="card-text">Year: @watch.Year</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        </div>

        <div class="slider-controls">
            <button class="prev" onclick="prevSlide()">&#10094;</button>
            <button class="next" onclick="nextSlide()">&#10095;</button>
            
        </div>
    }
    else
    {
        <p>No watches available.</p>
    }
</div>


@*this script deals with home page for the sliding of cards (next slide previous slide etc) for better aesthetics *@
<script>
    var currentIndex = 0;

    function showSlide(index) {
        const cardSlider = document.querySelector('.card-slider');
        const cards = document.querySelectorAll('.col-md-4');
        const totalSlides = cards.length;
        let translation;

        if (totalSlides - index < 3) { // If there are less than 3 cards to show
            translation = 0; // Reset to the first slide
            currentIndex = 0; // Reset the index to start
        } else {
            // Calculate the width of the card including the margin
            const cardStyle = getComputedStyle(document.querySelector('.card'));
            const cardWidth = document.querySelector('.card').offsetWidth;
            const cardMargin = parseFloat(cardStyle.marginLeft) + parseFloat(cardStyle.marginRight);
            const totalCardWidth = cardWidth + cardMargin;

            translation = -index * totalCardWidth;
        }

        cardSlider.style.transform = `translateX(${translation}px)`;
        showHiddenCards(index);
    }

    function nextSlide() {
        const totalSlides = @Model.Count();
        currentIndex = (currentIndex + 1) % totalSlides;
        showSlide(currentIndex);
    }


    function prevSlide() {
        const totalSlides = @Model.Count();
        if(currentIndex===0){
            currentIndex = totalSlides - 2;
        }
        currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        showSlide(currentIndex);
        if (currentIndex === totalSlides - 1) {
            // If at the first watch, set the index to the last watch
            currentIndex = totalSlides - 1;
            showSlide(currentIndex);
        }
    }

    function showHiddenCards(index) {
        const cards = document.querySelectorAll('.card');

        for (let i = 0; i < cards.length; i++) {
            if (i >= index && i < index + 3) {
                cards[i].classList.add('visible');
            } else {
                cards[i].classList.remove('visible');
            }
        }
    }

    // Initial display
    showSlide(currentIndex);
</script>
