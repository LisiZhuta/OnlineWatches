@* @model IEnumerable<OnlineWatches.Models.Watch>

@{
    ViewData["Title"] = "Home Page";
}

<style>
    .container {
        /*overflow:hidden;*/
    }

    .slider-container {
        overflow: hidden
    }

    .card-slider {
        display: flex;
        transition: transform 0.5s ease-in-out;
        position: relative;
    }

    .col-md-4 {
        position: relative;
    }

    .card {
        margin: 0 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }


        .card img {
            object-fit: contain; /* Changed from 'cover' to 'contain' */
            width: 100%;
            height: 200px;
            border-bottom: 1px solid #eee;
            /* If needed, adjust 'max-height' to a suitable value */
        }


    .card-body {
        padding: 15px;
        background-color: #f9f9f9;
    }

    .slider-controls {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 83%;
        display: flex;
        justify-content: space-between;
        z-index: 1;
    }

        .slider-controls button {
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 24px;
            padding: 8px 16px;
            border-radius: 4px;
            transition: background-color 0.3s ease-in-out;
        }

    .card button.next {
        /* Remove the right calculation */
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 100px; /* Adjust the right position */
        transition: background-color 0.3s ease-in-out;
    }

    .slider-controls button.next {
        /* Remove the right calculation */
        right: 0; /* Adjust the right position */
    }

    .slider-controls button:hover {
        background-color: #2980b9;
    }
</style>

<div class="container">
    <div class="text-center mt-5">
        <h1 class="display-4">Welcome</h1>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="slider-container">
            <div class="card-slider">
                @foreach (var watch in Model)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card">
                            <img src="@Url.Content(watch.ImgPath)" class="card-img-top" alt="Watch Image">
                            <div class="card-body">
                                <h5 class="card-title">@watch.Name</h5>
                                <p class="card-text">Price: $@watch.Price</p>
                                <p class="card-text">Year: @watch.Year</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="slider-controls">
            <button class="prev" onclick="prevSlide()">&#10094;</button>
            <button class="next" onclick="nextSlide()">&#10095;</button>

        </div>
    }
    else
    {
        <p>No watches available.</p>
    }
</div>

<script>
    var currentIndex = 0;

    function showSlide(index) {
        const cardSlider = document.querySelector('.card-slider');
        const cards = document.querySelectorAll('.col-md-4');
        const totalSlides = cards.length;
        let translation;

        if (totalSlides - index < 3) { // If there are less than 3 cards to show
            translation = 0; // Reset to the first slide
            currentIndex = 0; // Reset the index to start
        } else {
            // Calculate the width of the card including the margin
            const cardStyle = getComputedStyle(document.querySelector('.card'));
            const cardWidth = document.querySelector('.card').offsetWidth;
            const cardMargin = parseFloat(cardStyle.marginLeft) + parseFloat(cardStyle.marginRight);
            const totalCardWidth = cardWidth + cardMargin;

            translation = -index * totalCardWidth;
        }

        cardSlider.style.transform = `translateX(${translation}px)`;
        showHiddenCards(index);
    }

    function nextSlide() {
        const totalSlides = @Model.Count();
        currentIndex = (currentIndex + 1) % totalSlides;
        showSlide(currentIndex);
    }


    function prevSlide() {
        const totalSlides = @Model.Count();
        if (currentIndex === 0) {
            currentIndex = totalSlides - 2;
        }
        currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        showSlide(currentIndex);
        if (currentIndex === totalSlides - 1) {
            // If at the first watch, set the index to the last watch
            currentIndex = totalSlides - 1;
            showSlide(currentIndex);
        }
    }

    function showHiddenCards(index) {
        const cards = document.querySelectorAll('.card');

        for (let i = 0; i < cards.length; i++) {
            if (i >= index && i < index + 3) {
                cards[i].classList.add('visible');
            } else {
                cards[i].classList.remove('visible');
            }
        }
    }

    // Initial display
    showSlide(currentIndex);
</script>
 *@